{
  "title": "Understand TypeScript in Just 15 Minutes",
  "author": "Dawar bhai",
  "content": "TypeScript is JavaScript with superpowers ‚Äî it adds static typing, making your code safer and easier to maintain. Let‚Äôs master the basics quickly with real examples.\n\n---\n\n## 1. What is TypeScript?\nTypeScript is a superset of JavaScript that adds type safety. It helps catch bugs early and enhances code readability.\n\n### üîß Install TypeScript\n```bash\nnpm install -g typescript\n```\n\n---\n\n## 2. Your First TS File\n```ts\n// hello.ts\nlet message: string = 'Hello, TypeScript';\nconsole.log(message);\n```\n### ‚ñ∂Ô∏è Compile it\n```bash\ntsc hello.ts\n```\nIt generates a regular `hello.js` file.\n\n---\n\n## 3. Basic Types\n```ts\nlet age: number = 25;\nlet isLoggedIn: boolean = true;\nlet username: string = 'Dawar';\n```\nYou can define `string`, `number`, `boolean`, etc.\n\n---\n\n## 4. Arrays & Tuples\n```ts\nlet fruits: string[] = ['apple', 'banana'];\nlet user: [string, number] = ['Dawar', 25];\n```\n- Arrays hold multiple values of one type\n- Tuples can hold fixed-size different types\n\n---\n\n## 5. Functions with Types\n```ts\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}\nconsole.log(greet('Dawar'));\n```\nSpecify argument and return types.\n\n---\n\n## 6. Interfaces\n```ts\ninterface User {\n  name: string;\n  age: number;\n}\n\nlet user: User = {\n  name: 'Dawar',\n  age: 25\n};\n```\nInterfaces describe object structures.\n\n---\n\n## 7. Optional & Readonly Properties\n```ts\ninterface Product {\n  name: string;\n  price?: number; // optional\n  readonly id: string; // cannot change\n}\n```\n\n---\n\n## 8. Classes\n```ts\nclass Person {\n  constructor(public name: string) {}\n  greet() {\n    console.log(`Hi, I'm ${this.name}`);\n  }\n}\n\nconst p = new Person('Dawar');\np.greet();\n```\nClasses support public/private fields and methods.\n\n---\n\n## 9. Generics\n```ts\nfunction identity<T>(value: T): T {\n  return value;\n}\nconsole.log(identity<string>('Hello'));\n```\nGenerics let you write reusable code.\n\n---\n\n## 10. Type Aliases & Union Types\n```ts\ntype ID = string | number;\nlet userId: ID = 123;\nuserId = 'abc';\n```\nCombine multiple types using `|`.\n\n---\n\n## 11. Enums\n```ts\nenum Role { Admin, User, Guest }\nlet userRole: Role = Role.Admin;\n```\nEnums make code more readable and organized.\n\n---\n\n## 12. Tooling & tsconfig.json\nInitialize a config file for larger projects:\n```bash\ntsc --init\n```\nThis creates a `tsconfig.json` for setting compiler options.\n\n---\n\n## Bonus Tip: Use with React, Next.js\nTypeScript integrates beautifully with frameworks like React, Next.js, Node.js, and Express.\n\n---\n\n## Final Thoughts\nTypeScript helps you write clean, scalable code ‚Äî especially in team environments. Start using it today and level up your JavaScript!\n\n**Stay typed & confident ‚Äî Dawar bhai üöÄ**"
}
