{
  "title": "Learn Zustand in Just 15 Minutes",
  "author": "Dawar bhai",
  "content": "Zustand is a small, fast, and scalable state management library for React. It’s simpler than Redux and doesn’t require boilerplate. Let’s learn Zustand in just 15 minutes.\n\n---\n\n## 1. What is Zustand?\n- Zustand means \"state\" in German.\n- It's created by the developers of Jotai and React Spring.\n- No need for reducers, actions, or context providers.\n\n---\n\n## 2. Installation\n```bash\nnpm install zustand\n```\nOr with Yarn:\n```bash\nyarn add zustand\n```\n\n---\n\n## 3. Create a Store\n```js\nimport { create } from 'zustand';\n\nconst useStore = create((set) => ({\n  count: 0,\n  increase: () => set((state) => ({ count: state.count + 1 })),\n  reset: () => set({ count: 0 })\n}));\n```\n\n---\n\n## 4. Using the Store in Components\n```js\nfunction Counter() {\n  const { count, increase, reset } = useStore();\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={increase}>Increase</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n```\n\n---\n\n## 5. Selective State Usage\nOnly subscribe to the parts of state you need:\n```js\nconst count = useStore((state) => state.count);\n```\nThis prevents unnecessary re-renders.\n\n---\n\n## 6. Derived State\nYou can derive values inside components:\n```js\nconst double = useStore((state) => state.count * 2);\n```\n\n---\n\n## 7. Middleware Example\nAdd middleware like `persist` or `devtools`:\n```js\nimport { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\n\nconst useStore = create(\n  devtools(\n    persist((set) => ({\n      count: 0,\n      increase: () => set((state) => ({ count: state.count + 1 }))\n    }), { name: 'counter-storage' })\n  )\n);\n```\n\n---\n\n## 8. Reset or Replace Entire Store\n```js\nuseStore.setState({ count: 0 });\n```\nOr partially update:\n```js\nuseStore.setState((prev) => ({ count: prev.count + 1 }));\n```\n\n---\n\n## 9. Async Actions (e.g. Fetching)\n```js\nconst useUserStore = create((set) => ({\n  user: null,\n  fetchUser: async () => {\n    const res = await fetch('/api/user');\n    const data = await res.json();\n    set({ user: data });\n  }\n}));\n```\n\n---\n\n## 10. Use in Next.js\nZustand works great with Next.js — no `Provider` required. Just import and use the store in your components.\n\n---\n\n## Final Thoughts\nZustand is lightweight but powerful. It removes boilerplate and gives you a flexible, scalable store for your React apps.\n\n**Stay in control of your state — Dawar bhai**"
}
