{
  "title": "Understanding GraphQL in Just 15 Minutes",
  "author": "Dawar bhai",
  "content": "GraphQL is a query language for your APIs — and an alternative to REST. It lets clients ask exactly for what they need. Here’s a quick intro to the core concepts.\n\n---\n\n## 1. What is GraphQL?\nGraphQL is a flexible API query language and runtime that allows the client to:\n- Request only the data it needs\n- Get multiple resources in one call\n- Reduce over-fetching and under-fetching issues\n\n---\n\n## 2. Why Not REST?\nWith REST, you often make multiple requests to different endpoints (e.g. `/user`, `/user/posts`). GraphQL replaces all that with **one endpoint** that you query flexibly.\n\n---\n\n## 3. The Basics\nA typical GraphQL query looks like this:\n```graphql\n{\n  user(id: 1) {\n    name\n    email\n  }\n}\n```\nYou only get `name` and `email` back — nothing more.\n\n---\n\n## 4. GraphQL vs REST (Comparison)\n| Feature         | REST           | GraphQL         |\n|----------------|----------------|-----------------|\n| Over-fetching  | Yes            | No              |\n| Multiple calls | Often required | Single call     |\n| Schema         | Not enforced   | Strongly typed  |\n| Versioning     | Common         | Rare (evolves)  |\n\n---\n\n## 5. GraphQL Schema\nSchemas define types and operations. Example:\n```graphql\ntype User {\n  id: ID\n  name: String\n  email: String\n}\n\ntype Query {\n  user(id: ID!): User\n}\n```\n\n---\n\n## 6. Queries vs Mutations\n- `Query`: Get data\n- `Mutation`: Change data\n\nExample Mutation:\n```graphql\nmutation {\n  createUser(name: \"Dawar\", email: \"dawar@example.com\") {\n    id\n    name\n  }\n}\n```\n\n---\n\n## 7. Setting Up a Server (Using Apollo Server)\n```bash\nnpm install apollo-server graphql\n```\nCreate a basic server:\n```js\nconst { ApolloServer, gql } = require('apollo-server');\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello world!'\n  },\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.listen().then(({ url }) => {\n  console.log(`Server ready at ${url}`);\n});\n```\n\n---\n\n## 8. GraphQL Clients\nYou can use GraphQL with:\n- Apollo Client (React)\n- urql\n- Relay\n- Postman or GraphQL Playground\n\nExample using Apollo Client in React:\n```bash\nnpm install @apollo/client graphql\n```\n```js\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nclient.query({\n  query: gql`\n    {\n      hello\n    }\n  `,\n}).then(result => console.log(result));\n```\n\n---\n\n## 9. Tools to Try\n- [GraphQL Playground](https://github.com/graphql/graphql-playground)\n- [Apollo Studio](https://studio.apollographql.com/)\n- [Hasura](https://hasura.io/) — Instant GraphQL on PostgreSQL\n\n---\n\n## Final Thoughts\nGraphQL gives developers full control over API queries and responses. It’s great for modern apps where flexibility and performance matter.\n\n**Happy Querying! — Dawar bhai**"
}
