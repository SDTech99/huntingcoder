{
  "title": "Understanding JWT and Authentication in 15 Minutes",
  "author": "Dawar bhai",
  "content": "Authentication is how apps verify a user. One popular method is using JWT (JSON Web Tokens) ‚Äî a compact and secure way to manage sessions in modern web apps.\n\n---\n\n## 1. What is JWT?\nJWT stands for **JSON Web Token**. It‚Äôs a digitally signed string that represents claims about the user.\n\nA JWT looks like this:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NTYifQ.qwerty123456...\n```\nIt has 3 parts:\n1. Header (metadata)\n2. Payload (data like `userId`)\n3. Signature (verification)\n\n---\n\n## 2. When to Use JWT\nJWT is ideal for:\n- Stateless authentication (no sessions stored on server)\n- APIs / RESTful services\n- Single Page Applications (SPA)\n\n---\n\n## 3. How JWT Works\n‚úÖ **Login Phase**:\n- User logs in with email/password\n- Server verifies credentials\n- Server sends back a signed JWT\n\n‚úÖ **Usage Phase**:\n- Client stores token (usually in `localStorage` or `cookies`)\n- On every request, the token is sent in the `Authorization` header:\n```http\nAuthorization: Bearer <token>\n```\n- Server decodes & verifies token\n- If valid ‚Äî grants access\n\n---\n\n## 4. Install JWT Libraries\nFor Node.js backend:\n```bash\nnpm install jsonwebtoken\n```\n\n---\n\n## 5. Generate a Token\n```js\nconst jwt = require(\"jsonwebtoken\");\nconst token = jwt.sign({ userId: \"123\" }, \"secret123\", { expiresIn: \"1h\" });\nconsole.log(token);\n```\n\n---\n\n## 6. Verify the Token\n```js\ntry {\n  const decoded = jwt.verify(token, \"secret123\");\n  console.log(decoded); // { userId: \"123\", iat: ..., exp: ... }\n} catch (err) {\n  console.error(\"Invalid token\");\n}\n```\n\n---\n\n## 7. Middleware to Protect Routes\nExample in Express:\n```js\nconst authMiddleware = (req, res, next) => {\n  const token = req.headers.authorization?.split(\" \")[1];\n  if (!token) return res.status(401).send(\"Unauthorized\");\n\n  try {\n    const decoded = jwt.verify(token, \"secret123\");\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send(\"Invalid token\");\n  }\n};\n```\nUse it on protected routes:\n```js\napp.get(\"/dashboard\", authMiddleware, (req, res) => {\n  res.send(`Hello user ${req.user.userId}`);\n});\n```\n\n---\n\n## 8. Where to Store JWT?\n- `localStorage` ‚Üí Easy but vulnerable to XSS\n- `httpOnly cookies` ‚Üí More secure from XSS\n- Use HTTPS always üîê\n\n---\n\n## 9. JWT Best Practices\n‚úÖ Use short expiration times (e.g. 15min)\n‚úÖ Refresh tokens for long sessions\n‚úÖ Always verify signature\n‚úÖ Never expose secret key\n\n---\n\n## 10. Alternatives to JWT\n- Sessions (server-side)\n- OAuth 2.0\n- Firebase Auth (uses JWT internally)\n\n---\n\n## Final Thoughts\nJWT makes modern authentication simpler and scalable. It‚Äôs lightweight, secure (if done right), and works beautifully in APIs and microservices.\n\n**Stay secure and stateless ‚Äî Dawar bhai**"
}
