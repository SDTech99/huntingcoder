{
  "title": "MongoDB in 10 Minutes",
  "author": "Dawar bhai",
  "content": "MongoDB is a powerful NoSQL database known for its speed, scalability, and flexibility. It's document-based â€” meaning you store data in JSON-like objects. Letâ€™s get productive in 10 minutes.\n\n---\n\n## 1. Connect to MongoDB\nUse the official Node.js driver.\n```js\nconst { MongoClient } = require('mongodb');\nconst uri = 'your_mongodb_connection_string';\nconst client = new MongoClient(uri);\nawait client.connect();\nconst db = client.db('blogApp');\n```\nâœ… Youâ€™re now connected to your database.\n\n---\n\n## 2. Insert & Read Documents\nInsert a single post and fetch all posts:\n```js\n// Insert\nawait db.collection('posts').insertOne({ title: 'Hello Mongo', author: 'Dawar' });\n\n// Read\nconst posts = await db.collection('posts').find().toArray();\nconsole.log(posts);\n```\nDocuments are flexible â€” no need to define a strict schema upfront.\n\n---\n\n## 3. Update & Delete\nUpdate an existing post and then remove it.\n```js\n// Update\nawait db.collection('posts').updateOne(\n  { title: 'Hello Mongo' },\n  { $set: { title: 'Updated Title' } }\n);\n\n// Delete\nawait db.collection('posts').deleteOne({ title: 'Updated Title' });\n```\nAll operations are promise-based â€” easy to use with async/await.\n\n---\n\n## 4. Pro Tips\n- ðŸ§­ Use **MongoDB Compass** to visualize and manage your data.\n- âœ… Collections donâ€™t need to be created manually â€” theyâ€™re created on first use.\n- âš¡ Ideal for dynamic data models like blogs, products, chat apps.\n\n---\n\n## Final Thoughts\nMongoDB gives you speed without schema headaches. Itâ€™s perfect for modern apps where flexibility and iteration are key.\n\n**Data domination begins now â€” Dawar bhai ðŸš€**"
}
