{
  "title": "Understanding Angular Basics in 15 Minutes",
  "author": "Dawar bhai",
  "content": "Angular is a powerful front-end framework maintained by Google, ideal for building large-scale, single-page applications (SPAs). In this quick guide, youâ€™ll get a solid grasp of Angularâ€™s core concepts with examples.\n\n---\n\n## 1. What is Angular?\nAngular is a **TypeScript-based** framework used for building client-side applications. It uses components, services, and dependency injection to structure code.\n\n---\n\n## 2. Setting Up Angular (CLI)\nInstall Angular CLI globally:\n```bash\nnpm install -g @angular/cli\n```\nCreate a new project:\n```bash\nng new my-app\ncd my-app\nng serve\n```\nNavigate to `http://localhost:4200`\n\n---\n\n## 3. Angular Folder Structure\n- `src/app/`: Core app code\n- `app.component.ts`: Main component\n- `app.module.ts`: Root module\n\n---\n\n## 4. Components ðŸ§©\nComponents are building blocks.\n```ts\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  title = 'My First Angular App';\n}\n```\n\nHTML file:\n```html\n<h1>{{ title }}</h1>\n```\n\n---\n\n## 5. Data Binding\n### âœ… Interpolation\n```html\n<p>Hello {{ name }}</p>\n```\n### âœ… Property Binding\n```html\n<input [value]=\"name\">\n```\n### âœ… Event Binding\n```html\n<button (click)=\"greet()\">Click me</button>\n```\n\n---\n\n## 6. Directives\n- **ngIf** â€” Conditional rendering:\n```html\n<p *ngIf=\"isLoggedIn\">Welcome!</p>\n```\n- **ngFor** â€” Looping:\n```html\n<ul>\n  <li *ngFor=\"let item of items\">{{ item }}</li>\n</ul>\n```\n\n---\n\n## 7. Services & Dependency Injection\nUse services for business logic and API calls.\n```ts\n@Injectable({ providedIn: 'root' })\nexport class DataService {\n  getData() {\n    return ['Angular', 'React', 'Vue'];\n  }\n}\n```\nInject it in a component:\n```ts\nconstructor(private dataService: DataService) {}\nngOnInit() {\n  this.topics = this.dataService.getData();\n}\n```\n\n---\n\n## 8. Routing (SPA Navigation)\n```ts\n// app-routing.module.ts\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n];\n```\nUse in HTML:\n```html\n<a routerLink=\"/home\">Home</a>\n<router-outlet></router-outlet>\n```\n\n---\n\n## 9. Forms (Template-driven)\n```html\n<form #form=\"ngForm\" (ngSubmit)=\"onSubmit(form)\">\n  <input name=\"username\" ngModel required />\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n---\n\n## 10. HTTP Requests\n```ts\nconstructor(private http: HttpClient) {}\n\ngetUsers() {\n  this.http.get('https://api.example.com/users')\n    .subscribe(data => this.users = data);\n}\n```\n\nImport HttpClientModule in `app.module.ts`:\n```ts\nimport { HttpClientModule } from '@angular/common/http';\n@NgModule({\n  imports: [HttpClientModule]\n})\n```\n\n---\n\n## 11. Build and Deploy ðŸš€\nBuild the app:\n```bash\nng build\n```\nDeploy with platforms like Firebase, Vercel, or Netlify.\n\n---\n\n## Final Thoughts\nAngular can be intimidating at first, but it offers structure and scalability. Focus on mastering components, services, and routing.\n\n**Keep practicing! â€” Dawar bhai**"
}
